// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: breakpoint.proto

#ifndef PROTOBUF_INCLUDED_breakpoint_2eproto
#define PROTOBUF_INCLUDED_breakpoint_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_breakpoint_2eproto 

namespace protobuf_breakpoint_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_breakpoint_2eproto
namespace google {
namespace cloud {
namespace diagnostics {
namespace debug {
class Breakpoint;
class BreakpointDefaultTypeInternal;
extern BreakpointDefaultTypeInternal _Breakpoint_default_instance_;
class SourceLocation;
class SourceLocationDefaultTypeInternal;
extern SourceLocationDefaultTypeInternal _SourceLocation_default_instance_;
class StackFrame;
class StackFrameDefaultTypeInternal;
extern StackFrameDefaultTypeInternal _StackFrame_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace debug
}  // namespace diagnostics
}  // namespace cloud
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::cloud::diagnostics::debug::Breakpoint* Arena::CreateMaybeMessage<::google::cloud::diagnostics::debug::Breakpoint>(Arena*);
template<> ::google::cloud::diagnostics::debug::SourceLocation* Arena::CreateMaybeMessage<::google::cloud::diagnostics::debug::SourceLocation>(Arena*);
template<> ::google::cloud::diagnostics::debug::StackFrame* Arena::CreateMaybeMessage<::google::cloud::diagnostics::debug::StackFrame>(Arena*);
template<> ::google::cloud::diagnostics::debug::Status* Arena::CreateMaybeMessage<::google::cloud::diagnostics::debug::Status>(Arena*);
template<> ::google::cloud::diagnostics::debug::Variable* Arena::CreateMaybeMessage<::google::cloud::diagnostics::debug::Variable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace diagnostics {
namespace debug {

// ===================================================================

class Breakpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.Breakpoint) */ {
 public:
  Breakpoint();
  virtual ~Breakpoint();

  Breakpoint(const Breakpoint& from);

  inline Breakpoint& operator=(const Breakpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Breakpoint(Breakpoint&& from) noexcept
    : Breakpoint() {
    *this = ::std::move(from);
  }

  inline Breakpoint& operator=(Breakpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Breakpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Breakpoint* internal_default_instance() {
    return reinterpret_cast<const Breakpoint*>(
               &_Breakpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Breakpoint* other);
  friend void swap(Breakpoint& a, Breakpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Breakpoint* New() const final {
    return CreateMaybeMessage<Breakpoint>(NULL);
  }

  Breakpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Breakpoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Breakpoint& from);
  void MergeFrom(const Breakpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Breakpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
  int stack_frames_size() const;
  void clear_stack_frames();
  static const int kStackFramesFieldNumber = 3;
  ::google::cloud::diagnostics::debug::StackFrame* mutable_stack_frames(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame >*
      mutable_stack_frames();
  const ::google::cloud::diagnostics::debug::StackFrame& stack_frames(int index) const;
  ::google::cloud::diagnostics::debug::StackFrame* add_stack_frames();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame >&
      stack_frames() const;

  // repeated string expressions = 8;
  int expressions_size() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 8;
  const ::std::string& expressions(int index) const;
  ::std::string* mutable_expressions(int index);
  void set_expressions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_expressions(int index, ::std::string&& value);
  #endif
  void set_expressions(int index, const char* value);
  void set_expressions(int index, const char* value, size_t size);
  ::std::string* add_expressions();
  void add_expressions(const ::std::string& value);
  #if LANG_CXX11
  void add_expressions(::std::string&& value);
  #endif
  void add_expressions(const char* value);
  void add_expressions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& expressions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expressions();

  // repeated .google.cloud.diagnostics.debug.Variable evaluated_expressions = 10;
  int evaluated_expressions_size() const;
  void clear_evaluated_expressions();
  static const int kEvaluatedExpressionsFieldNumber = 10;
  ::google::cloud::diagnostics::debug::Variable* mutable_evaluated_expressions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
      mutable_evaluated_expressions();
  const ::google::cloud::diagnostics::debug::Variable& evaluated_expressions(int index) const;
  ::google::cloud::diagnostics::debug::Variable* add_evaluated_expressions();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
      evaluated_expressions() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string condition = 9;
  void clear_condition();
  static const int kConditionFieldNumber = 9;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_condition(::std::string&& value);
  #endif
  void set_condition(const char* value);
  void set_condition(const char* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::google::cloud::diagnostics::debug::SourceLocation& _internal_location() const;
  public:
  const ::google::cloud::diagnostics::debug::SourceLocation& location() const;
  ::google::cloud::diagnostics::debug::SourceLocation* release_location();
  ::google::cloud::diagnostics::debug::SourceLocation* mutable_location();
  void set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location);

  // .google.protobuf.Timestamp create_time = 5;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp final_time = 6;
  bool has_final_time() const;
  void clear_final_time();
  static const int kFinalTimeFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_final_time() const;
  public:
  const ::google::protobuf::Timestamp& final_time() const;
  ::google::protobuf::Timestamp* release_final_time();
  ::google::protobuf::Timestamp* mutable_final_time();
  void set_allocated_final_time(::google::protobuf::Timestamp* final_time);

  // .google.cloud.diagnostics.debug.Status status = 11;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  private:
  const ::google::cloud::diagnostics::debug::Status& _internal_status() const;
  public:
  const ::google::cloud::diagnostics::debug::Status& status() const;
  ::google::cloud::diagnostics::debug::Status* release_status();
  ::google::cloud::diagnostics::debug::Status* mutable_status();
  void set_allocated_status(::google::cloud::diagnostics::debug::Status* status);

  // bool activated = 4;
  void clear_activated();
  static const int kActivatedFieldNumber = 4;
  bool activated() const;
  void set_activated(bool value);

  // bool kill_server = 7;
  void clear_kill_server();
  static const int kKillServerFieldNumber = 7;
  bool kill_server() const;
  void set_kill_server(bool value);

  // bool logging = 12;
  void clear_logging();
  static const int kLoggingFieldNumber = 12;
  bool logging() const;
  void set_logging(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.Breakpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame > stack_frames_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expressions_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable > evaluated_expressions_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  ::google::cloud::diagnostics::debug::SourceLocation* location_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* final_time_;
  ::google::cloud::diagnostics::debug::Status* status_;
  bool activated_;
  bool kill_server_;
  bool logging_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_breakpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StackFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.StackFrame) */ {
 public:
  StackFrame();
  virtual ~StackFrame();

  StackFrame(const StackFrame& from);

  inline StackFrame& operator=(const StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StackFrame(StackFrame&& from) noexcept
    : StackFrame() {
    *this = ::std::move(from);
  }

  inline StackFrame& operator=(StackFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackFrame*>(
               &_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StackFrame* other);
  friend void swap(StackFrame& a, StackFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StackFrame* New() const final {
    return CreateMaybeMessage<StackFrame>(NULL);
  }

  StackFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StackFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StackFrame& from);
  void MergeFrom(const StackFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 3;
  ::google::cloud::diagnostics::debug::Variable* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
      mutable_arguments();
  const ::google::cloud::diagnostics::debug::Variable& arguments(int index) const;
  ::google::cloud::diagnostics::debug::Variable* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
      arguments() const;

  // repeated .google.cloud.diagnostics.debug.Variable locals = 4;
  int locals_size() const;
  void clear_locals();
  static const int kLocalsFieldNumber = 4;
  ::google::cloud::diagnostics::debug::Variable* mutable_locals(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
      mutable_locals();
  const ::google::cloud::diagnostics::debug::Variable& locals(int index) const;
  ::google::cloud::diagnostics::debug::Variable* add_locals();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
      locals() const;

  // string method_name = 1;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 1;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::google::cloud::diagnostics::debug::SourceLocation& _internal_location() const;
  public:
  const ::google::cloud::diagnostics::debug::SourceLocation& location() const;
  ::google::cloud::diagnostics::debug::SourceLocation* release_location();
  ::google::cloud::diagnostics::debug::SourceLocation* mutable_location();
  void set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.StackFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable > arguments_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable > locals_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::cloud::diagnostics::debug::SourceLocation* location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_breakpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.SourceLocation) */ {
 public:
  SourceLocation();
  virtual ~SourceLocation();

  SourceLocation(const SourceLocation& from);

  inline SourceLocation& operator=(const SourceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceLocation(SourceLocation&& from) noexcept
    : SourceLocation() {
    *this = ::std::move(from);
  }

  inline SourceLocation& operator=(SourceLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceLocation* internal_default_instance() {
    return reinterpret_cast<const SourceLocation*>(
               &_SourceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SourceLocation* other);
  friend void swap(SourceLocation& a, SourceLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceLocation* New() const final {
    return CreateMaybeMessage<SourceLocation>(NULL);
  }

  SourceLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceLocation& from);
  void MergeFrom(const SourceLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.SourceLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 line_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_breakpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const final {
    return CreateMaybeMessage<Variable>(NULL);
  }

  Variable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.diagnostics.debug.Variable members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  ::google::cloud::diagnostics::debug::Variable* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
      mutable_members();
  const ::google::cloud::diagnostics::debug::Variable& members(int index) const;
  ::google::cloud::diagnostics::debug::Variable* add_members();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
      members() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.cloud.diagnostics.debug.Status status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  private:
  const ::google::cloud::diagnostics::debug::Status& _internal_status() const;
  public:
  const ::google::cloud::diagnostics::debug::Status& status() const;
  ::google::cloud::diagnostics::debug::Status* release_status();
  ::google::cloud::diagnostics::debug::Status* mutable_status();
  void set_allocated_status(::google::cloud::diagnostics::debug::Status* status);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.Variable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable > members_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::cloud::diagnostics::debug::Status* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_breakpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(NULL);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool iserror = 1;
  void clear_iserror();
  static const int kIserrorFieldNumber = 1;
  bool iserror() const;
  void set_iserror(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool iserror_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_breakpoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Breakpoint

// string id = 1;
inline void Breakpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.GetNoArena();
}
inline void Breakpoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.id)
}
#if LANG_CXX11
inline void Breakpoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Breakpoint.id)
}
#endif
inline void Breakpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Breakpoint.id)
}
inline void Breakpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Breakpoint.id)
}
inline ::std::string* Breakpoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.id)
}

// .google.cloud.diagnostics.debug.SourceLocation location = 2;
inline bool Breakpoint::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Breakpoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::google::cloud::diagnostics::debug::SourceLocation& Breakpoint::_internal_location() const {
  return *location_;
}
inline const ::google::cloud::diagnostics::debug::SourceLocation& Breakpoint::location() const {
  const ::google::cloud::diagnostics::debug::SourceLocation* p = location_;
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::diagnostics::debug::SourceLocation*>(
      &::google::cloud::diagnostics::debug::_SourceLocation_default_instance_);
}
inline ::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.location)
  
  ::google::cloud::diagnostics::debug::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::mutable_location() {
  
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::diagnostics::debug::SourceLocation>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_;
}
inline void Breakpoint::set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.location)
}

// repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
inline int Breakpoint::stack_frames_size() const {
  return stack_frames_.size();
}
inline void Breakpoint::clear_stack_frames() {
  stack_frames_.Clear();
}
inline ::google::cloud::diagnostics::debug::StackFrame* Breakpoint::mutable_stack_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame >*
Breakpoint::mutable_stack_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return &stack_frames_;
}
inline const ::google::cloud::diagnostics::debug::StackFrame& Breakpoint::stack_frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_.Get(index);
}
inline ::google::cloud::diagnostics::debug::StackFrame* Breakpoint::add_stack_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame >&
Breakpoint::stack_frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_;
}

// bool activated = 4;
inline void Breakpoint::clear_activated() {
  activated_ = false;
}
inline bool Breakpoint::activated() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.activated)
  return activated_;
}
inline void Breakpoint::set_activated(bool value) {
  
  activated_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.activated)
}

// .google.protobuf.Timestamp create_time = 5;
inline bool Breakpoint::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Breakpoint::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Breakpoint::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Breakpoint::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Breakpoint::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_;
}
inline void Breakpoint::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.create_time)
}

// .google.protobuf.Timestamp final_time = 6;
inline bool Breakpoint::has_final_time() const {
  return this != internal_default_instance() && final_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Breakpoint::_internal_final_time() const {
  return *final_time_;
}
inline const ::google::protobuf::Timestamp& Breakpoint::final_time() const {
  const ::google::protobuf::Timestamp* p = final_time_;
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Breakpoint::release_final_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.final_time)
  
  ::google::protobuf::Timestamp* temp = final_time_;
  final_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Breakpoint::mutable_final_time() {
  
  if (final_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    final_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_;
}
inline void Breakpoint::set_allocated_final_time(::google::protobuf::Timestamp* final_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(final_time_);
  }
  if (final_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(final_time)->GetArena();
    if (message_arena != submessage_arena) {
      final_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, final_time, submessage_arena);
    }
    
  } else {
    
  }
  final_time_ = final_time;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.final_time)
}

// bool kill_server = 7;
inline void Breakpoint::clear_kill_server() {
  kill_server_ = false;
}
inline bool Breakpoint::kill_server() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.kill_server)
  return kill_server_;
}
inline void Breakpoint::set_kill_server(bool value) {
  
  kill_server_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.kill_server)
}

// repeated string expressions = 8;
inline int Breakpoint::expressions_size() const {
  return expressions_.size();
}
inline void Breakpoint::clear_expressions() {
  expressions_.Clear();
}
inline const ::std::string& Breakpoint::expressions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.expressions)
  return expressions_.Get(index);
}
inline ::std::string* Breakpoint::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.expressions)
  return expressions_.Mutable(index);
}
inline void Breakpoint::set_expressions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.expressions)
  expressions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Breakpoint::set_expressions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.expressions)
  expressions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Breakpoint::set_expressions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expressions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Breakpoint.expressions)
}
inline void Breakpoint::set_expressions(int index, const char* value, size_t size) {
  expressions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Breakpoint.expressions)
}
inline ::std::string* Breakpoint::add_expressions() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.diagnostics.debug.Breakpoint.expressions)
  return expressions_.Add();
}
inline void Breakpoint::add_expressions(const ::std::string& value) {
  expressions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Breakpoint.expressions)
}
#if LANG_CXX11
inline void Breakpoint::add_expressions(::std::string&& value) {
  expressions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Breakpoint.expressions)
}
#endif
inline void Breakpoint::add_expressions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  expressions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.diagnostics.debug.Breakpoint.expressions)
}
inline void Breakpoint::add_expressions(const char* value, size_t size) {
  expressions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.diagnostics.debug.Breakpoint.expressions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Breakpoint::expressions() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.Breakpoint.expressions)
  return expressions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Breakpoint::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.Breakpoint.expressions)
  return &expressions_;
}

// string condition = 9;
inline void Breakpoint::clear_condition() {
  condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::condition() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.condition)
  return condition_.GetNoArena();
}
inline void Breakpoint::set_condition(const ::std::string& value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.condition)
}
#if LANG_CXX11
inline void Breakpoint::set_condition(::std::string&& value) {
  
  condition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Breakpoint.condition)
}
#endif
inline void Breakpoint::set_condition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Breakpoint.condition)
}
inline void Breakpoint::set_condition(const char* value, size_t size) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Breakpoint.condition)
}
inline ::std::string* Breakpoint::mutable_condition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.condition)
  return condition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_condition() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.condition)
  
  return condition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    
  } else {
    
  }
  condition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.condition)
}

// repeated .google.cloud.diagnostics.debug.Variable evaluated_expressions = 10;
inline int Breakpoint::evaluated_expressions_size() const {
  return evaluated_expressions_.size();
}
inline void Breakpoint::clear_evaluated_expressions() {
  evaluated_expressions_.Clear();
}
inline ::google::cloud::diagnostics::debug::Variable* Breakpoint::mutable_evaluated_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.evaluated_expressions)
  return evaluated_expressions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
Breakpoint::mutable_evaluated_expressions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.Breakpoint.evaluated_expressions)
  return &evaluated_expressions_;
}
inline const ::google::cloud::diagnostics::debug::Variable& Breakpoint::evaluated_expressions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.evaluated_expressions)
  return evaluated_expressions_.Get(index);
}
inline ::google::cloud::diagnostics::debug::Variable* Breakpoint::add_evaluated_expressions() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Breakpoint.evaluated_expressions)
  return evaluated_expressions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
Breakpoint::evaluated_expressions() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.Breakpoint.evaluated_expressions)
  return evaluated_expressions_;
}

// .google.cloud.diagnostics.debug.Status status = 11;
inline bool Breakpoint::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Breakpoint::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::cloud::diagnostics::debug::Status& Breakpoint::_internal_status() const {
  return *status_;
}
inline const ::google::cloud::diagnostics::debug::Status& Breakpoint::status() const {
  const ::google::cloud::diagnostics::debug::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::diagnostics::debug::Status*>(
      &::google::cloud::diagnostics::debug::_Status_default_instance_);
}
inline ::google::cloud::diagnostics::debug::Status* Breakpoint::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.status)
  
  ::google::cloud::diagnostics::debug::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::cloud::diagnostics::debug::Status* Breakpoint::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::diagnostics::debug::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.status)
  return status_;
}
inline void Breakpoint::set_allocated_status(::google::cloud::diagnostics::debug::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.status)
}

// bool logging = 12;
inline void Breakpoint::clear_logging() {
  logging_ = false;
}
inline bool Breakpoint::logging() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.logging)
  return logging_;
}
inline void Breakpoint::set_logging(bool value) {
  
  logging_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.logging)
}

// -------------------------------------------------------------------

// StackFrame

// string method_name = 1;
inline void StackFrame::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StackFrame::method_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.method_name)
  return method_name_.GetNoArena();
}
inline void StackFrame::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.StackFrame.method_name)
}
#if LANG_CXX11
inline void StackFrame::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.StackFrame.method_name)
}
#endif
inline void StackFrame::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.StackFrame.method_name)
}
inline void StackFrame::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.StackFrame.method_name)
}
inline ::std::string* StackFrame::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackFrame::release_method_name() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.StackFrame.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackFrame::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.StackFrame.method_name)
}

// .google.cloud.diagnostics.debug.SourceLocation location = 2;
inline bool StackFrame::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void StackFrame::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::google::cloud::diagnostics::debug::SourceLocation& StackFrame::_internal_location() const {
  return *location_;
}
inline const ::google::cloud::diagnostics::debug::SourceLocation& StackFrame::location() const {
  const ::google::cloud::diagnostics::debug::SourceLocation* p = location_;
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.location)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::diagnostics::debug::SourceLocation*>(
      &::google::cloud::diagnostics::debug::_SourceLocation_default_instance_);
}
inline ::google::cloud::diagnostics::debug::SourceLocation* StackFrame::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.StackFrame.location)
  
  ::google::cloud::diagnostics::debug::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::google::cloud::diagnostics::debug::SourceLocation* StackFrame::mutable_location() {
  
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::diagnostics::debug::SourceLocation>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.location)
  return location_;
}
inline void StackFrame::set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.StackFrame.location)
}

// repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
inline int StackFrame::arguments_size() const {
  return arguments_.size();
}
inline void StackFrame::clear_arguments() {
  arguments_.Clear();
}
inline ::google::cloud::diagnostics::debug::Variable* StackFrame::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
StackFrame::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.StackFrame.arguments)
  return &arguments_;
}
inline const ::google::cloud::diagnostics::debug::Variable& StackFrame::arguments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_.Get(index);
}
inline ::google::cloud::diagnostics::debug::Variable* StackFrame::add_arguments() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
StackFrame::arguments() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_;
}

// repeated .google.cloud.diagnostics.debug.Variable locals = 4;
inline int StackFrame::locals_size() const {
  return locals_.size();
}
inline void StackFrame::clear_locals() {
  locals_.Clear();
}
inline ::google::cloud::diagnostics::debug::Variable* StackFrame::mutable_locals(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
StackFrame::mutable_locals() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.StackFrame.locals)
  return &locals_;
}
inline const ::google::cloud::diagnostics::debug::Variable& StackFrame::locals(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_.Get(index);
}
inline ::google::cloud::diagnostics::debug::Variable* StackFrame::add_locals() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
StackFrame::locals() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_;
}

// -------------------------------------------------------------------

// SourceLocation

// string path = 1;
inline void SourceLocation::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceLocation::path() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.GetNoArena();
}
inline void SourceLocation::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.path)
}
#if LANG_CXX11
inline void SourceLocation::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.SourceLocation.path)
}
#endif
inline void SourceLocation::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.SourceLocation.path)
}
inline void SourceLocation::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.SourceLocation.path)
}
inline ::std::string* SourceLocation::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceLocation::release_path() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.SourceLocation.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceLocation::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.SourceLocation.path)
}

// int32 line = 2;
inline void SourceLocation::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.line)
  return line_;
}
inline void SourceLocation::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.line)
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.name)
  return name_.GetNoArena();
}
inline void Variable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Variable.name)
}
#if LANG_CXX11
inline void Variable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Variable.name)
}
#endif
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Variable.name)
}
inline void Variable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Variable.name)
}
inline ::std::string* Variable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.name)
}

// string type = 2;
inline void Variable::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.type)
  return type_.GetNoArena();
}
inline void Variable::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Variable.type)
}
#if LANG_CXX11
inline void Variable::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Variable.type)
}
#endif
inline void Variable::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Variable.type)
}
inline void Variable::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Variable.type)
}
inline ::std::string* Variable::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_type() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.type)
}

// string value = 3;
inline void Variable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.value)
  return value_.GetNoArena();
}
inline void Variable::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Variable.value)
}
#if LANG_CXX11
inline void Variable::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Variable.value)
}
#endif
inline void Variable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Variable.value)
}
inline void Variable::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Variable.value)
}
inline ::std::string* Variable::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.value)
}

// repeated .google.cloud.diagnostics.debug.Variable members = 4;
inline int Variable::members_size() const {
  return members_.size();
}
inline void Variable::clear_members() {
  members_.Clear();
}
inline ::google::cloud::diagnostics::debug::Variable* Variable::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
Variable::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.Variable.members)
  return &members_;
}
inline const ::google::cloud::diagnostics::debug::Variable& Variable::members(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.members)
  return members_.Get(index);
}
inline ::google::cloud::diagnostics::debug::Variable* Variable::add_members() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Variable.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
Variable::members() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.Variable.members)
  return members_;
}

// .google.cloud.diagnostics.debug.Status status = 5;
inline bool Variable::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void Variable::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::google::cloud::diagnostics::debug::Status& Variable::_internal_status() const {
  return *status_;
}
inline const ::google::cloud::diagnostics::debug::Status& Variable::status() const {
  const ::google::cloud::diagnostics::debug::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::cloud::diagnostics::debug::Status*>(
      &::google::cloud::diagnostics::debug::_Status_default_instance_);
}
inline ::google::cloud::diagnostics::debug::Status* Variable::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.status)
  
  ::google::cloud::diagnostics::debug::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::cloud::diagnostics::debug::Status* Variable::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::cloud::diagnostics::debug::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.status)
  return status_;
}
inline void Variable::set_allocated_status(::google::cloud::diagnostics::debug::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.status)
}

// -------------------------------------------------------------------

// Status

// bool iserror = 1;
inline void Status::clear_iserror() {
  iserror_ = false;
}
inline bool Status::iserror() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Status.iserror)
  return iserror_;
}
inline void Status::set_iserror(bool value) {
  
  iserror_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Status.iserror)
}

// string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Status.message)
  return message_.GetNoArena();
}
inline void Status::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Status.message)
}
#if LANG_CXX11
inline void Status::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Status.message)
}
#endif
inline void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Status.message)
}
inline void Status::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Status.message)
}
inline ::std::string* Status::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Status.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Status.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Status.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace debug
}  // namespace diagnostics
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_breakpoint_2eproto
