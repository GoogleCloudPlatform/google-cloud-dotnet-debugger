// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: breakpoint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "breakpoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace diagnostics {
namespace debug {
class BreakpointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Breakpoint> {
} _Breakpoint_default_instance_;
class SourceLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SourceLocation> {
} _SourceLocation_default_instance_;

namespace protobuf_breakpoint_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, is_final_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, final_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceLocation, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceLocation, line_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Breakpoint)},
  { 10, -1, sizeof(SourceLocation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Breakpoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceLocation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "breakpoint.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Breakpoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SourceLocation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _Breakpoint_default_instance_.DefaultConstruct();
  _SourceLocation_default_instance_.DefaultConstruct();
  _Breakpoint_default_instance_.get_mutable()->location_ = const_cast< ::google::cloud::diagnostics::debug::SourceLocation*>(
      ::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance());
  _Breakpoint_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Breakpoint_default_instance_.get_mutable()->final_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020breakpoint.proto\022\036google.cloud.diagnos"
      "tics.debug\032\037google/protobuf/timestamp.pr"
      "oto\"\323\001\n\nBreakpoint\022\n\n\002id\030\001 \001(\t\022@\n\010locati"
      "on\030\002 \001(\0132..google.cloud.diagnostics.debu"
      "g.SourceLocation\022\026\n\016is_final_state\030\003 \001(\010"
      "\022/\n\013create_time\030\004 \001(\0132\032.google.protobuf."
      "Timestamp\022.\n\nfinal_time\030\005 \001(\0132\032.google.p"
      "rotobuf.Timestamp\",\n\016SourceLocation\022\014\n\004p"
      "ath\030\001 \001(\t\022\014\n\004line\030\002 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "breakpoint.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_breakpoint_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Breakpoint::kIdFieldNumber;
const int Breakpoint::kLocationFieldNumber;
const int Breakpoint::kIsFinalStateFieldNumber;
const int Breakpoint::kCreateTimeFieldNumber;
const int Breakpoint::kFinalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Breakpoint::Breakpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.Breakpoint)
}
Breakpoint::Breakpoint(const Breakpoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_location()) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_final_time()) {
    final_time_ = new ::google::protobuf::Timestamp(*from.final_time_);
  } else {
    final_time_ = NULL;
  }
  is_final_state_ = from.is_final_state_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.Breakpoint)
}

void Breakpoint::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, reinterpret_cast<char*>(&is_final_state_) -
    reinterpret_cast<char*>(&location_) + sizeof(is_final_state_));
  _cached_size_ = 0;
}

Breakpoint::~Breakpoint() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.Breakpoint)
  SharedDtor();
}

void Breakpoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete final_time_;
  }
}

void Breakpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Breakpoint::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Breakpoint& Breakpoint::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Breakpoint* Breakpoint::New(::google::protobuf::Arena* arena) const {
  Breakpoint* n = new Breakpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Breakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.Breakpoint)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && final_time_ != NULL) {
    delete final_time_;
  }
  final_time_ = NULL;
  is_final_state_ = false;
}

bool Breakpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.Breakpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.Breakpoint.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.diagnostics.debug.SourceLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp final_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.Breakpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.Breakpoint)
  return false;
#undef DO_
}

void Breakpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.Breakpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Breakpoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // bool is_final_state = 3;
  if (this->is_final_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_final_state(), output);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp final_time = 5;
  if (this->has_final_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->final_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.Breakpoint)
}

::google::protobuf::uint8* Breakpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.Breakpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Breakpoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // bool is_final_state = 3;
  if (this->is_final_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_final_state(), target);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp final_time = 5;
  if (this->has_final_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->final_time_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.Breakpoint)
  return target;
}

size_t Breakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.Breakpoint)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp final_time = 5;
  if (this->has_final_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->final_time_);
  }

  // bool is_final_state = 3;
  if (this->is_final_state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Breakpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.Breakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Breakpoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Breakpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.Breakpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.Breakpoint)
    MergeFrom(*source);
  }
}

void Breakpoint::MergeFrom(const Breakpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.Breakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_location()) {
    mutable_location()->::google::cloud::diagnostics::debug::SourceLocation::MergeFrom(from.location());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_final_time()) {
    mutable_final_time()->::google::protobuf::Timestamp::MergeFrom(from.final_time());
  }
  if (from.is_final_state() != 0) {
    set_is_final_state(from.is_final_state());
  }
}

void Breakpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.Breakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Breakpoint::CopyFrom(const Breakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.Breakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Breakpoint::IsInitialized() const {
  return true;
}

void Breakpoint::Swap(Breakpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Breakpoint::InternalSwap(Breakpoint* other) {
  id_.Swap(&other->id_);
  std::swap(location_, other->location_);
  std::swap(create_time_, other->create_time_);
  std::swap(final_time_, other->final_time_);
  std::swap(is_final_state_, other->is_final_state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Breakpoint::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Breakpoint

// string id = 1;
void Breakpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Breakpoint::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.GetNoArena();
}
void Breakpoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.id)
}
#if LANG_CXX11
void Breakpoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Breakpoint.id)
}
#endif
void Breakpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Breakpoint.id)
}
void Breakpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Breakpoint.id)
}
::std::string* Breakpoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Breakpoint::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Breakpoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.id)
}

// .google.cloud.diagnostics.debug.SourceLocation location = 2;
bool Breakpoint::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Breakpoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::google::cloud::diagnostics::debug::SourceLocation& Breakpoint::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_ != NULL ? *location_
                         : *::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance();
}
::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_;
}
::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.location)
  
  ::google::cloud::diagnostics::debug::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void Breakpoint::set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.location)
}

// bool is_final_state = 3;
void Breakpoint::clear_is_final_state() {
  is_final_state_ = false;
}
bool Breakpoint::is_final_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.is_final_state)
  return is_final_state_;
}
void Breakpoint::set_is_final_state(bool value) {
  
  is_final_state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.is_final_state)
}

// .google.protobuf.Timestamp create_time = 4;
bool Breakpoint::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Breakpoint::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Breakpoint::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Breakpoint::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Breakpoint::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Breakpoint::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.create_time)
}

// .google.protobuf.Timestamp final_time = 5;
bool Breakpoint::has_final_time() const {
  return this != internal_default_instance() && final_time_ != NULL;
}
void Breakpoint::clear_final_time() {
  if (GetArenaNoVirtual() == NULL && final_time_ != NULL) delete final_time_;
  final_time_ = NULL;
}
const ::google::protobuf::Timestamp& Breakpoint::final_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_ != NULL ? *final_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Breakpoint::mutable_final_time() {
  
  if (final_time_ == NULL) {
    final_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_;
}
::google::protobuf::Timestamp* Breakpoint::release_final_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.final_time)
  
  ::google::protobuf::Timestamp* temp = final_time_;
  final_time_ = NULL;
  return temp;
}
void Breakpoint::set_allocated_final_time(::google::protobuf::Timestamp* final_time) {
  delete final_time_;
  if (final_time != NULL && final_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_final_time = new ::google::protobuf::Timestamp;
    new_final_time->CopyFrom(*final_time);
    final_time = new_final_time;
  }
  final_time_ = final_time;
  if (final_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.final_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceLocation::kPathFieldNumber;
const int SourceLocation::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceLocation::SourceLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.SourceLocation)
}
SourceLocation::SourceLocation(const SourceLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.SourceLocation)
}

void SourceLocation::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  _cached_size_ = 0;
}

SourceLocation::~SourceLocation() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.SourceLocation)
  SharedDtor();
}

void SourceLocation::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SourceLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceLocation::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceLocation& SourceLocation::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceLocation* SourceLocation::New(::google::protobuf::Arena* arena) const {
  SourceLocation* n = new SourceLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.SourceLocation)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
}

bool SourceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.SourceLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.SourceLocation.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.SourceLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.SourceLocation)
  return false;
#undef DO_
}

void SourceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.SourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.SourceLocation.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // int32 line = 2;
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.SourceLocation)
}

::google::protobuf::uint8* SourceLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.SourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.SourceLocation.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // int32 line = 2;
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.SourceLocation)
  return target;
}

size_t SourceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.SourceLocation)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.SourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.SourceLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.SourceLocation)
    MergeFrom(*source);
  }
}

void SourceLocation::MergeFrom(const SourceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.SourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
}

void SourceLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.SourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceLocation::CopyFrom(const SourceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.SourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceLocation::IsInitialized() const {
  return true;
}

void SourceLocation::Swap(SourceLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceLocation::InternalSwap(SourceLocation* other) {
  path_.Swap(&other->path_);
  std::swap(line_, other->line_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceLocation::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceLocation

// string path = 1;
void SourceLocation::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SourceLocation::path() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.GetNoArena();
}
void SourceLocation::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.path)
}
#if LANG_CXX11
void SourceLocation::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.SourceLocation.path)
}
#endif
void SourceLocation::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.SourceLocation.path)
}
void SourceLocation::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.SourceLocation.path)
}
::std::string* SourceLocation::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceLocation::release_path() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.SourceLocation.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceLocation::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.SourceLocation.path)
}

// int32 line = 2;
void SourceLocation::clear_line() {
  line_ = 0;
}
::google::protobuf::int32 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.line)
  return line_;
}
void SourceLocation::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.line)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace debug
}  // namespace diagnostics
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
