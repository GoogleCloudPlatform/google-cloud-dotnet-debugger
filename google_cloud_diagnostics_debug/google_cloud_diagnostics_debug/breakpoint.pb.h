// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: breakpoint.proto

#ifndef PROTOBUF_breakpoint_2eproto__INCLUDED
#define PROTOBUF_breakpoint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace cloud {
namespace diagnostics {
namespace debug {
class Breakpoint;
class BreakpointDefaultTypeInternal;
extern BreakpointDefaultTypeInternal _Breakpoint_default_instance_;
class SourceLocation;
class SourceLocationDefaultTypeInternal;
extern SourceLocationDefaultTypeInternal _SourceLocation_default_instance_;
}  // namespace debug
}  // namespace diagnostics
}  // namespace cloud
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace google {
namespace cloud {
namespace diagnostics {
namespace debug {

namespace protobuf_breakpoint_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_breakpoint_2eproto

// ===================================================================

class Breakpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.Breakpoint) */ {
 public:
  Breakpoint();
  virtual ~Breakpoint();

  Breakpoint(const Breakpoint& from);

  inline Breakpoint& operator=(const Breakpoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Breakpoint& default_instance();

  static inline const Breakpoint* internal_default_instance() {
    return reinterpret_cast<const Breakpoint*>(
               &_Breakpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Breakpoint* other);

  // implements Message ----------------------------------------------

  inline Breakpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  Breakpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Breakpoint& from);
  void MergeFrom(const Breakpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Breakpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::google::cloud::diagnostics::debug::SourceLocation& location() const;
  ::google::cloud::diagnostics::debug::SourceLocation* mutable_location();
  ::google::cloud::diagnostics::debug::SourceLocation* release_location();
  void set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* mutable_create_time();
  ::google::protobuf::Timestamp* release_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp final_time = 5;
  bool has_final_time() const;
  void clear_final_time();
  static const int kFinalTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& final_time() const;
  ::google::protobuf::Timestamp* mutable_final_time();
  ::google::protobuf::Timestamp* release_final_time();
  void set_allocated_final_time(::google::protobuf::Timestamp* final_time);

  // bool is_final_state = 3;
  void clear_is_final_state();
  static const int kIsFinalStateFieldNumber = 3;
  bool is_final_state() const;
  void set_is_final_state(bool value);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.Breakpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::cloud::diagnostics::debug::SourceLocation* location_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* final_time_;
  bool is_final_state_;
  mutable int _cached_size_;
  friend struct protobuf_breakpoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.diagnostics.debug.SourceLocation) */ {
 public:
  SourceLocation();
  virtual ~SourceLocation();

  SourceLocation(const SourceLocation& from);

  inline SourceLocation& operator=(const SourceLocation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceLocation& default_instance();

  static inline const SourceLocation* internal_default_instance() {
    return reinterpret_cast<const SourceLocation*>(
               &_SourceLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SourceLocation* other);

  // implements Message ----------------------------------------------

  inline SourceLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceLocation& from);
  void MergeFrom(const SourceLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.diagnostics.debug.SourceLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 line_;
  mutable int _cached_size_;
  friend struct protobuf_breakpoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Breakpoint

// string id = 1;
inline void Breakpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Breakpoint::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.GetNoArena();
}
inline void Breakpoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.id)
}
#if LANG_CXX11
inline void Breakpoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Breakpoint.id)
}
#endif
inline void Breakpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Breakpoint.id)
}
inline void Breakpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Breakpoint.id)
}
inline ::std::string* Breakpoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Breakpoint::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Breakpoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.id)
}

// .google.cloud.diagnostics.debug.SourceLocation location = 2;
inline bool Breakpoint::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Breakpoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
inline const ::google::cloud::diagnostics::debug::SourceLocation& Breakpoint::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_ != NULL ? *location_
                         : *::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance();
}
inline ::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_;
}
inline ::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.location)
  
  ::google::cloud::diagnostics::debug::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Breakpoint::set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.location)
}

// bool is_final_state = 3;
inline void Breakpoint::clear_is_final_state() {
  is_final_state_ = false;
}
inline bool Breakpoint::is_final_state() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.is_final_state)
  return is_final_state_;
}
inline void Breakpoint::set_is_final_state(bool value) {
  
  is_final_state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.is_final_state)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool Breakpoint::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline void Breakpoint::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Breakpoint::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Breakpoint::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_;
}
inline ::google::protobuf::Timestamp* Breakpoint::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline void Breakpoint::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.create_time)
}

// .google.protobuf.Timestamp final_time = 5;
inline bool Breakpoint::has_final_time() const {
  return this != internal_default_instance() && final_time_ != NULL;
}
inline void Breakpoint::clear_final_time() {
  if (GetArenaNoVirtual() == NULL && final_time_ != NULL) delete final_time_;
  final_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Breakpoint::final_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_ != NULL ? *final_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Breakpoint::mutable_final_time() {
  
  if (final_time_ == NULL) {
    final_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_;
}
inline ::google::protobuf::Timestamp* Breakpoint::release_final_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.final_time)
  
  ::google::protobuf::Timestamp* temp = final_time_;
  final_time_ = NULL;
  return temp;
}
inline void Breakpoint::set_allocated_final_time(::google::protobuf::Timestamp* final_time) {
  delete final_time_;
  if (final_time != NULL && final_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_final_time = new ::google::protobuf::Timestamp;
    new_final_time->CopyFrom(*final_time);
    final_time = new_final_time;
  }
  final_time_ = final_time;
  if (final_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.final_time)
}

// -------------------------------------------------------------------

// SourceLocation

// string path = 1;
inline void SourceLocation::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceLocation::path() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.GetNoArena();
}
inline void SourceLocation::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.path)
}
#if LANG_CXX11
inline void SourceLocation::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.SourceLocation.path)
}
#endif
inline void SourceLocation::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.SourceLocation.path)
}
inline void SourceLocation::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.SourceLocation.path)
}
inline ::std::string* SourceLocation::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceLocation::release_path() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.SourceLocation.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceLocation::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.SourceLocation.path)
}

// int32 line = 2;
inline void SourceLocation::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.line)
  return line_;
}
inline void SourceLocation::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.line)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace debug
}  // namespace diagnostics
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_breakpoint_2eproto__INCLUDED
