// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: breakpoint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "breakpoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace diagnostics {
namespace debug {
class BreakpointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Breakpoint> {
} _Breakpoint_default_instance_;
class StackFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StackFrame> {
} _StackFrame_default_instance_;
class SourceLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SourceLocation> {
} _SourceLocation_default_instance_;
class VariableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Variable> {
} _Variable_default_instance_;
class StatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Status> {
} _Status_default_instance_;

namespace protobuf_breakpoint_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, stack_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, activated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Breakpoint, final_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrame, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrame, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrame, arguments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackFrame, locals_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceLocation, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceLocation, line_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, iserror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, message_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Breakpoint)},
  { 11, -1, sizeof(StackFrame)},
  { 20, -1, sizeof(SourceLocation)},
  { 27, -1, sizeof(Variable)},
  { 37, -1, sizeof(Status)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Breakpoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StackFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Variable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "breakpoint.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Breakpoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _StackFrame_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SourceLocation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Variable_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Status_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _Breakpoint_default_instance_.DefaultConstruct();
  _StackFrame_default_instance_.DefaultConstruct();
  _SourceLocation_default_instance_.DefaultConstruct();
  _Variable_default_instance_.DefaultConstruct();
  _Status_default_instance_.DefaultConstruct();
  _Breakpoint_default_instance_.get_mutable()->location_ = const_cast< ::google::cloud::diagnostics::debug::SourceLocation*>(
      ::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance());
  _Breakpoint_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Breakpoint_default_instance_.get_mutable()->final_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _StackFrame_default_instance_.get_mutable()->location_ = const_cast< ::google::cloud::diagnostics::debug::SourceLocation*>(
      ::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance());
  _Variable_default_instance_.get_mutable()->status_ = const_cast< ::google::cloud::diagnostics::debug::Status*>(
      ::google::cloud::diagnostics::debug::Status::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020breakpoint.proto\022\036google.cloud.diagnos"
      "tics.debug\032\037google/protobuf/timestamp.pr"
      "oto\"\220\002\n\nBreakpoint\022\n\n\002id\030\001 \001(\t\022@\n\010locati"
      "on\030\002 \001(\0132..google.cloud.diagnostics.debu"
      "g.SourceLocation\022@\n\014stack_frames\030\003 \003(\0132*"
      ".google.cloud.diagnostics.debug.StackFra"
      "me\022\021\n\tactivated\030\004 \001(\010\022/\n\013create_time\030\005 \001"
      "(\0132\032.google.protobuf.Timestamp\022.\n\nfinal_"
      "time\030\006 \001(\0132\032.google.protobuf.Timestamp\"\332"
      "\001\n\nStackFrame\022\023\n\013method_name\030\001 \001(\t\022@\n\010lo"
      "cation\030\002 \001(\0132..google.cloud.diagnostics."
      "debug.SourceLocation\022;\n\targuments\030\003 \003(\0132"
      "(.google.cloud.diagnostics.debug.Variabl"
      "e\0228\n\006locals\030\004 \003(\0132(.google.cloud.diagnos"
      "tics.debug.Variable\",\n\016SourceLocation\022\014\n"
      "\004path\030\001 \001(\t\022\014\n\004line\030\002 \001(\005\"\250\001\n\010Variable\022\014"
      "\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\r\n\005value\030\003 \001("
      "\t\0229\n\007members\030\004 \003(\0132(.google.cloud.diagno"
      "stics.debug.Variable\0226\n\006status\030\005 \001(\0132&.g"
      "oogle.cloud.diagnostics.debug.Status\"*\n\006"
      "Status\022\017\n\007iserror\030\001 \001(\010\022\017\n\007message\030\002 \001(\t"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "breakpoint.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_breakpoint_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Breakpoint::kIdFieldNumber;
const int Breakpoint::kLocationFieldNumber;
const int Breakpoint::kStackFramesFieldNumber;
const int Breakpoint::kActivatedFieldNumber;
const int Breakpoint::kCreateTimeFieldNumber;
const int Breakpoint::kFinalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Breakpoint::Breakpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.Breakpoint)
}
Breakpoint::Breakpoint(const Breakpoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stack_frames_(from.stack_frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_location()) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_final_time()) {
    final_time_ = new ::google::protobuf::Timestamp(*from.final_time_);
  } else {
    final_time_ = NULL;
  }
  activated_ = from.activated_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.Breakpoint)
}

void Breakpoint::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, reinterpret_cast<char*>(&activated_) -
    reinterpret_cast<char*>(&location_) + sizeof(activated_));
  _cached_size_ = 0;
}

Breakpoint::~Breakpoint() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.Breakpoint)
  SharedDtor();
}

void Breakpoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete final_time_;
  }
}

void Breakpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Breakpoint::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Breakpoint& Breakpoint::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Breakpoint* Breakpoint::New(::google::protobuf::Arena* arena) const {
  Breakpoint* n = new Breakpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Breakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.Breakpoint)
  stack_frames_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && final_time_ != NULL) {
    delete final_time_;
  }
  final_time_ = NULL;
  activated_ = false;
}

bool Breakpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.Breakpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.Breakpoint.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.diagnostics.debug.SourceLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stack_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool activated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp final_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.Breakpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.Breakpoint)
  return false;
#undef DO_
}

void Breakpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.Breakpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Breakpoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
  for (unsigned int i = 0, n = this->stack_frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stack_frames(i), output);
  }

  // bool activated = 4;
  if (this->activated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->activated(), output);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp final_time = 6;
  if (this->has_final_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->final_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.Breakpoint)
}

::google::protobuf::uint8* Breakpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.Breakpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Breakpoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
  for (unsigned int i = 0, n = this->stack_frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stack_frames(i), deterministic, target);
  }

  // bool activated = 4;
  if (this->activated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->activated(), target);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp final_time = 6;
  if (this->has_final_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->final_time_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.Breakpoint)
  return target;
}

size_t Breakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.Breakpoint)
  size_t total_size = 0;

  // repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
  {
    unsigned int count = this->stack_frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stack_frames(i));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp final_time = 6;
  if (this->has_final_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->final_time_);
  }

  // bool activated = 4;
  if (this->activated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Breakpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.Breakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Breakpoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Breakpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.Breakpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.Breakpoint)
    MergeFrom(*source);
  }
}

void Breakpoint::MergeFrom(const Breakpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.Breakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_frames_.MergeFrom(from.stack_frames_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_location()) {
    mutable_location()->::google::cloud::diagnostics::debug::SourceLocation::MergeFrom(from.location());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_final_time()) {
    mutable_final_time()->::google::protobuf::Timestamp::MergeFrom(from.final_time());
  }
  if (from.activated() != 0) {
    set_activated(from.activated());
  }
}

void Breakpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.Breakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Breakpoint::CopyFrom(const Breakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.Breakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Breakpoint::IsInitialized() const {
  return true;
}

void Breakpoint::Swap(Breakpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Breakpoint::InternalSwap(Breakpoint* other) {
  stack_frames_.InternalSwap(&other->stack_frames_);
  id_.Swap(&other->id_);
  std::swap(location_, other->location_);
  std::swap(create_time_, other->create_time_);
  std::swap(final_time_, other->final_time_);
  std::swap(activated_, other->activated_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Breakpoint::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Breakpoint

// string id = 1;
void Breakpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Breakpoint::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.GetNoArena();
}
void Breakpoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.id)
}
#if LANG_CXX11
void Breakpoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Breakpoint.id)
}
#endif
void Breakpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Breakpoint.id)
}
void Breakpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Breakpoint.id)
}
::std::string* Breakpoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Breakpoint::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Breakpoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.id)
}

// .google.cloud.diagnostics.debug.SourceLocation location = 2;
bool Breakpoint::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Breakpoint::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::google::cloud::diagnostics::debug::SourceLocation& Breakpoint::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_ != NULL ? *location_
                         : *::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance();
}
::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.location)
  return location_;
}
::google::cloud::diagnostics::debug::SourceLocation* Breakpoint::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.location)
  
  ::google::cloud::diagnostics::debug::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void Breakpoint::set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.location)
}

// repeated .google.cloud.diagnostics.debug.StackFrame stack_frames = 3;
int Breakpoint::stack_frames_size() const {
  return stack_frames_.size();
}
void Breakpoint::clear_stack_frames() {
  stack_frames_.Clear();
}
const ::google::cloud::diagnostics::debug::StackFrame& Breakpoint::stack_frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_.Get(index);
}
::google::cloud::diagnostics::debug::StackFrame* Breakpoint::mutable_stack_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_.Mutable(index);
}
::google::cloud::diagnostics::debug::StackFrame* Breakpoint::add_stack_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame >*
Breakpoint::mutable_stack_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return &stack_frames_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::StackFrame >&
Breakpoint::stack_frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.Breakpoint.stack_frames)
  return stack_frames_;
}

// bool activated = 4;
void Breakpoint::clear_activated() {
  activated_ = false;
}
bool Breakpoint::activated() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.activated)
  return activated_;
}
void Breakpoint::set_activated(bool value) {
  
  activated_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Breakpoint.activated)
}

// .google.protobuf.Timestamp create_time = 5;
bool Breakpoint::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Breakpoint::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Breakpoint::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Breakpoint::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Breakpoint::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Breakpoint::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.create_time)
}

// .google.protobuf.Timestamp final_time = 6;
bool Breakpoint::has_final_time() const {
  return this != internal_default_instance() && final_time_ != NULL;
}
void Breakpoint::clear_final_time() {
  if (GetArenaNoVirtual() == NULL && final_time_ != NULL) delete final_time_;
  final_time_ = NULL;
}
const ::google::protobuf::Timestamp& Breakpoint::final_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_ != NULL ? *final_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Breakpoint::mutable_final_time() {
  
  if (final_time_ == NULL) {
    final_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Breakpoint.final_time)
  return final_time_;
}
::google::protobuf::Timestamp* Breakpoint::release_final_time() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Breakpoint.final_time)
  
  ::google::protobuf::Timestamp* temp = final_time_;
  final_time_ = NULL;
  return temp;
}
void Breakpoint::set_allocated_final_time(::google::protobuf::Timestamp* final_time) {
  delete final_time_;
  if (final_time != NULL && final_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_final_time = new ::google::protobuf::Timestamp;
    new_final_time->CopyFrom(*final_time);
    final_time = new_final_time;
  }
  final_time_ = final_time;
  if (final_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Breakpoint.final_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackFrame::kMethodNameFieldNumber;
const int StackFrame::kLocationFieldNumber;
const int StackFrame::kArgumentsFieldNumber;
const int StackFrame::kLocalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackFrame::StackFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.StackFrame)
}
StackFrame::StackFrame(const StackFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      arguments_(from.arguments_),
      locals_(from.locals_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_location()) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.StackFrame)
}

void StackFrame::SharedCtor() {
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  _cached_size_ = 0;
}

StackFrame::~StackFrame() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.StackFrame)
  SharedDtor();
}

void StackFrame::SharedDtor() {
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void StackFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackFrame::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StackFrame& StackFrame::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

StackFrame* StackFrame::New(::google::protobuf::Arena* arena) const {
  StackFrame* n = new StackFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.StackFrame)
  arguments_.Clear();
  locals_.Clear();
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}

bool StackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.StackFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string method_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.StackFrame.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.diagnostics.debug.SourceLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.diagnostics.debug.Variable locals = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_locals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.StackFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.StackFrame)
  return false;
#undef DO_
}

void StackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method_name = 1;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.StackFrame.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method_name(), output);
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  // repeated .google.cloud.diagnostics.debug.Variable locals = 4;
  for (unsigned int i = 0, n = this->locals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->locals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.StackFrame)
}

::google::protobuf::uint8* StackFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method_name = 1;
  if (this->method_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.StackFrame.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method_name(), target);
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->arguments(i), deterministic, target);
  }

  // repeated .google.cloud.diagnostics.debug.Variable locals = 4;
  for (unsigned int i = 0, n = this->locals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->locals(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.StackFrame)
  return target;
}

size_t StackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.StackFrame)
  size_t total_size = 0;

  // repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
  {
    unsigned int count = this->arguments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arguments(i));
    }
  }

  // repeated .google.cloud.diagnostics.debug.Variable locals = 4;
  {
    unsigned int count = this->locals_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locals(i));
    }
  }

  // string method_name = 1;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  // .google.cloud.diagnostics.debug.SourceLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const StackFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.StackFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.StackFrame)
    MergeFrom(*source);
  }
}

void StackFrame::MergeFrom(const StackFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  locals_.MergeFrom(from.locals_);
  if (from.method_name().size() > 0) {

    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_location()) {
    mutable_location()->::google::cloud::diagnostics::debug::SourceLocation::MergeFrom(from.location());
  }
}

void StackFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackFrame::CopyFrom(const StackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrame::IsInitialized() const {
  return true;
}

void StackFrame::Swap(StackFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackFrame::InternalSwap(StackFrame* other) {
  arguments_.InternalSwap(&other->arguments_);
  locals_.InternalSwap(&other->locals_);
  method_name_.Swap(&other->method_name_);
  std::swap(location_, other->location_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackFrame::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StackFrame

// string method_name = 1;
void StackFrame::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StackFrame::method_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.method_name)
  return method_name_.GetNoArena();
}
void StackFrame::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.StackFrame.method_name)
}
#if LANG_CXX11
void StackFrame::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.StackFrame.method_name)
}
#endif
void StackFrame::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.StackFrame.method_name)
}
void StackFrame::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.StackFrame.method_name)
}
::std::string* StackFrame::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StackFrame::release_method_name() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.StackFrame.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StackFrame::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.StackFrame.method_name)
}

// .google.cloud.diagnostics.debug.SourceLocation location = 2;
bool StackFrame::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void StackFrame::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::google::cloud::diagnostics::debug::SourceLocation& StackFrame::location() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.location)
  return location_ != NULL ? *location_
                         : *::google::cloud::diagnostics::debug::SourceLocation::internal_default_instance();
}
::google::cloud::diagnostics::debug::SourceLocation* StackFrame::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::cloud::diagnostics::debug::SourceLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.location)
  return location_;
}
::google::cloud::diagnostics::debug::SourceLocation* StackFrame::release_location() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.StackFrame.location)
  
  ::google::cloud::diagnostics::debug::SourceLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void StackFrame::set_allocated_location(::google::cloud::diagnostics::debug::SourceLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.StackFrame.location)
}

// repeated .google.cloud.diagnostics.debug.Variable arguments = 3;
int StackFrame::arguments_size() const {
  return arguments_.size();
}
void StackFrame::clear_arguments() {
  arguments_.Clear();
}
const ::google::cloud::diagnostics::debug::Variable& StackFrame::arguments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_.Get(index);
}
::google::cloud::diagnostics::debug::Variable* StackFrame::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_.Mutable(index);
}
::google::cloud::diagnostics::debug::Variable* StackFrame::add_arguments() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
StackFrame::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.StackFrame.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
StackFrame::arguments() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.StackFrame.arguments)
  return arguments_;
}

// repeated .google.cloud.diagnostics.debug.Variable locals = 4;
int StackFrame::locals_size() const {
  return locals_.size();
}
void StackFrame::clear_locals() {
  locals_.Clear();
}
const ::google::cloud::diagnostics::debug::Variable& StackFrame::locals(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_.Get(index);
}
::google::cloud::diagnostics::debug::Variable* StackFrame::mutable_locals(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_.Mutable(index);
}
::google::cloud::diagnostics::debug::Variable* StackFrame::add_locals() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
StackFrame::mutable_locals() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.StackFrame.locals)
  return &locals_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
StackFrame::locals() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.StackFrame.locals)
  return locals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceLocation::kPathFieldNumber;
const int SourceLocation::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceLocation::SourceLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.SourceLocation)
}
SourceLocation::SourceLocation(const SourceLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.SourceLocation)
}

void SourceLocation::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  _cached_size_ = 0;
}

SourceLocation::~SourceLocation() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.SourceLocation)
  SharedDtor();
}

void SourceLocation::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SourceLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceLocation::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceLocation& SourceLocation::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceLocation* SourceLocation::New(::google::protobuf::Arena* arena) const {
  SourceLocation* n = new SourceLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SourceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.SourceLocation)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
}

bool SourceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.SourceLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.SourceLocation.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.SourceLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.SourceLocation)
  return false;
#undef DO_
}

void SourceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.SourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.SourceLocation.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // int32 line = 2;
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.SourceLocation)
}

::google::protobuf::uint8* SourceLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.SourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.SourceLocation.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // int32 line = 2;
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.SourceLocation)
  return target;
}

size_t SourceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.SourceLocation)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int32 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.SourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.SourceLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.SourceLocation)
    MergeFrom(*source);
  }
}

void SourceLocation::MergeFrom(const SourceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.SourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
}

void SourceLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.SourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceLocation::CopyFrom(const SourceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.SourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceLocation::IsInitialized() const {
  return true;
}

void SourceLocation::Swap(SourceLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SourceLocation::InternalSwap(SourceLocation* other) {
  path_.Swap(&other->path_);
  std::swap(line_, other->line_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceLocation::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceLocation

// string path = 1;
void SourceLocation::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SourceLocation::path() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.GetNoArena();
}
void SourceLocation::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.path)
}
#if LANG_CXX11
void SourceLocation::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.SourceLocation.path)
}
#endif
void SourceLocation::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.SourceLocation.path)
}
void SourceLocation::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.SourceLocation.path)
}
::std::string* SourceLocation::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.SourceLocation.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SourceLocation::release_path() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.SourceLocation.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SourceLocation::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.SourceLocation.path)
}

// int32 line = 2;
void SourceLocation::clear_line() {
  line_ = 0;
}
::google::protobuf::int32 SourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.SourceLocation.line)
  return line_;
}
void SourceLocation::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.SourceLocation.line)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variable::kNameFieldNumber;
const int Variable::kTypeFieldNumber;
const int Variable::kValueFieldNumber;
const int Variable::kMembersFieldNumber;
const int Variable::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variable::Variable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.Variable)
}
Variable::Variable(const Variable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_status()) {
    status_ = new ::google::cloud::diagnostics::debug::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.Variable)
}

void Variable::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  _cached_size_ = 0;
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.Variable)
  SharedDtor();
}

void Variable::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variable::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Variable& Variable::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Variable* Variable::New(::google::protobuf::Arena* arena) const {
  Variable* n = new Variable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.Variable)
  members_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}

bool Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.Variable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.Variable.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.Variable.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.Variable.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.diagnostics.debug.Variable members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.diagnostics.debug.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.Variable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.Variable)
  return false;
#undef DO_
}

void Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Variable.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Variable.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Variable.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // repeated .google.cloud.diagnostics.debug.Variable members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // .google.cloud.diagnostics.debug.Status status = 5;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.Variable)
}

::google::protobuf::uint8* Variable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.Variable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Variable.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Variable.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Variable.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // repeated .google.cloud.diagnostics.debug.Variable members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->members(i), deterministic, target);
  }

  // .google.cloud.diagnostics.debug.Status status = 5;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.Variable)
  size_t total_size = 0;

  // repeated .google.cloud.diagnostics.debug.Variable members = 4;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .google.cloud.diagnostics.debug.Status status = 5;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  const Variable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Variable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.Variable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.Variable)
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_status()) {
    mutable_status()->::google::cloud::diagnostics::debug::Status::MergeFrom(from.status());
  }
}

void Variable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::Swap(Variable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variable::InternalSwap(Variable* other) {
  members_.InternalSwap(&other->members_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  value_.Swap(&other->value_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Variable

// string name = 1;
void Variable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.name)
  return name_.GetNoArena();
}
void Variable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Variable.name)
}
#if LANG_CXX11
void Variable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Variable.name)
}
#endif
void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Variable.name)
}
void Variable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Variable.name)
}
::std::string* Variable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.name)
}

// string type = 2;
void Variable::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.type)
  return type_.GetNoArena();
}
void Variable::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Variable.type)
}
#if LANG_CXX11
void Variable::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Variable.type)
}
#endif
void Variable::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Variable.type)
}
void Variable::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Variable.type)
}
::std::string* Variable::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Variable::release_type() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variable::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.type)
}

// string value = 3;
void Variable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Variable::value() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.value)
  return value_.GetNoArena();
}
void Variable::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Variable.value)
}
#if LANG_CXX11
void Variable::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Variable.value)
}
#endif
void Variable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Variable.value)
}
void Variable::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Variable.value)
}
::std::string* Variable::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Variable::release_value() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Variable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.value)
}

// repeated .google.cloud.diagnostics.debug.Variable members = 4;
int Variable::members_size() const {
  return members_.size();
}
void Variable::clear_members() {
  members_.Clear();
}
const ::google::cloud::diagnostics::debug::Variable& Variable::members(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.members)
  return members_.Get(index);
}
::google::cloud::diagnostics::debug::Variable* Variable::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.members)
  return members_.Mutable(index);
}
::google::cloud::diagnostics::debug::Variable* Variable::add_members() {
  // @@protoc_insertion_point(field_add:google.cloud.diagnostics.debug.Variable.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >*
Variable::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.diagnostics.debug.Variable.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::diagnostics::debug::Variable >&
Variable::members() const {
  // @@protoc_insertion_point(field_list:google.cloud.diagnostics.debug.Variable.members)
  return members_;
}

// .google.cloud.diagnostics.debug.Status status = 5;
bool Variable::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void Variable::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::cloud::diagnostics::debug::Status& Variable::status() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Variable.status)
  return status_ != NULL ? *status_
                         : *::google::cloud::diagnostics::debug::Status::internal_default_instance();
}
::google::cloud::diagnostics::debug::Status* Variable::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::cloud::diagnostics::debug::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Variable.status)
  return status_;
}
::google::cloud::diagnostics::debug::Status* Variable::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Variable.status)
  
  ::google::cloud::diagnostics::debug::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void Variable::set_allocated_status(::google::cloud::diagnostics::debug::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Variable.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kIserrorFieldNumber;
const int Status::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_breakpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.diagnostics.debug.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  iserror_ = from.iserror_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.diagnostics.debug.Status)
}

void Status::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iserror_ = false;
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:google.cloud.diagnostics.debug.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_breakpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.diagnostics.debug.Status)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iserror_ = false;
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.diagnostics.debug.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool iserror = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iserror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.diagnostics.debug.Status.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.diagnostics.debug.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.diagnostics.debug.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.diagnostics.debug.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool iserror = 1;
  if (this->iserror() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iserror(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Status.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.diagnostics.debug.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.diagnostics.debug.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool iserror = 1;
  if (this->iserror() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iserror(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.diagnostics.debug.Status.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.diagnostics.debug.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.diagnostics.debug.Status)
  size_t total_size = 0;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool iserror = 1;
  if (this->iserror() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.diagnostics.debug.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.diagnostics.debug.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.diagnostics.debug.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.diagnostics.debug.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.iserror() != 0) {
    set_iserror(from.iserror());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.diagnostics.debug.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.diagnostics.debug.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  message_.Swap(&other->message_);
  std::swap(iserror_, other->iserror_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_breakpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_breakpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// bool iserror = 1;
void Status::clear_iserror() {
  iserror_ = false;
}
bool Status::iserror() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Status.iserror)
  return iserror_;
}
void Status::set_iserror(bool value) {
  
  iserror_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Status.iserror)
}

// string message = 2;
void Status::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:google.cloud.diagnostics.debug.Status.message)
  return message_.GetNoArena();
}
void Status::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.diagnostics.debug.Status.message)
}
#if LANG_CXX11
void Status::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.diagnostics.debug.Status.message)
}
#endif
void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.diagnostics.debug.Status.message)
}
void Status::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.diagnostics.debug.Status.message)
}
::std::string* Status::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.diagnostics.debug.Status.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:google.cloud.diagnostics.debug.Status.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.diagnostics.debug.Status.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace debug
}  // namespace diagnostics
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
